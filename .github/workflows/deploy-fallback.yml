name: Deploy NetPulse (Fallback Method)

# This is a fallback deployment method if the main Pages workflow fails
# Use this workflow if you're having issues with the standard GitHub Pages deployment

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment even if Pages is not configured"
        required: false
        default: false
        type: boolean

# Minimal permissions for basic deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-fallback:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Check Repository Structure
        run: |
          echo "=== Repository Structure Check ==="
          echo "Current directory: $(pwd)"
          echo "Files in root:"
          ls -la

          echo ""
          echo "=== Required Files Check ==="
          required_files=("index.html" "manifest.json" "sw.js")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists"
            else
              echo "‚ùå $file missing"
            fi
          done

          echo ""
          echo "=== Directory Structure ==="
          find . -type d -not -path "./.git*" | head -10

      - name: Prepare Static Files
        run: |
          echo "=== Preparing deployment files ==="

          # Create a clean deployment directory
          mkdir -p _site

          # Copy all files except .git and .github
          rsync -av --exclude='.git' --exclude='.github' --exclude='_site' . _site/

          echo "Files prepared for deployment:"
          ls -la _site/

      - name: Validate HTML
        run: |
          echo "=== HTML Validation ==="
          if [ -f "_site/index.html" ]; then
            echo "‚úÖ index.html found in deployment directory"
            
            # Basic HTML structure check
            if grep -q "<!DOCTYPE html>" _site/index.html; then
              echo "‚úÖ DOCTYPE declaration found"
            else
              echo "‚ö†Ô∏è  DOCTYPE declaration missing"
            fi
            
            if grep -q "<title>" _site/index.html; then
              echo "‚úÖ Title tag found"
            else
              echo "‚ö†Ô∏è  Title tag missing"
            fi
          else
            echo "‚ùå index.html not found in deployment directory"
            exit 1
          fi

      - name: Test Local Server
        run: |
          echo "=== Testing Local Server ==="
          cd _site

          # Start a simple HTTP server
          python3 -m http.server 8080 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 2

          # Test if server responds
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "‚úÖ Local server test passed"
          else
            echo "‚ùå Local server test failed"
          fi

          # Clean up
          kill $SERVER_PID 2>/dev/null || true

      - name: Setup Pages (with error handling)
        id: pages-setup
        continue-on-error: true
        uses: actions/configure-pages@v4

      - name: Check Pages Setup Result
        run: |
          if [ "${{ steps.pages-setup.outcome }}" = "success" ]; then
            echo "‚úÖ Pages setup successful"
          else
            echo "‚ö†Ô∏è  Pages setup failed - this might be expected if Pages is not enabled"
            echo "Please follow the setup guide in .github/SETUP.md"
          fi

      - name: Upload Pages Artifact
        id: upload-artifact
        continue-on-error: true
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

      - name: Deploy to GitHub Pages
        id: deployment
        continue-on-error: true
        uses: actions/deploy-pages@v4

      - name: Deployment Summary
        run: |
          echo "=== Deployment Summary ==="
          echo "Pages Setup: ${{ steps.pages-setup.outcome }}"
          echo "Artifact Upload: ${{ steps.upload-artifact.outcome }}"
          echo "Deployment: ${{ steps.deployment.outcome }}"

          if [ "${{ steps.deployment.outcome }}" = "success" ]; then
            echo ""
            echo "üéâ Deployment successful!"
            echo "Your site should be available at: ${{ steps.deployment.outputs.page_url }}"
          else
            echo ""
            echo "‚ùå Deployment failed. Please check:"
            echo "1. GitHub Pages is enabled in repository settings"
            echo "2. Source is set to 'GitHub Actions' in Pages settings"
            echo "3. Repository is public (or you have GitHub Pro+)"
            echo ""
            echo "See .github/SETUP.md for detailed instructions"
          fi

      - name: Create Deployment Report
        if: always()
        run: |
          echo "=== Creating Deployment Report ==="
          cat > deployment-report.md << EOF
          # NetPulse Deployment Report

          **Date**: $(date)
          **Commit**: ${{ github.sha }}
          **Branch**: ${{ github.ref_name }}
          **Repository**: ${{ github.repository }}

          ## Deployment Status
          - Pages Setup: ${{ steps.pages-setup.outcome }}
          - Artifact Upload: ${{ steps.upload-artifact.outcome }}
          - Deployment: ${{ steps.deployment.outcome }}

          ## Files Deployed
          $(find _site -type f | head -20)

          ## Next Steps
          $(if [ "${{ steps.deployment.outcome }}" = "success" ]; then
            echo "‚úÖ Deployment successful! Site available at: ${{ steps.deployment.outputs.page_url }}"
          else
            echo "‚ùå Deployment failed. Please check GitHub Pages settings."
            echo "See .github/SETUP.md for detailed setup instructions."
          fi)
          EOF

          echo "Report created:"
          cat deployment-report.md

      - name: Upload Deployment Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 30

name: CI/CD - NetPulse Deployment

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

# Set permissions for GitHub Pages deployment
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Continuous Integration Job
  ci:
    name: Continuous Integration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Dependencies
        run: |
          # Install basic tools for testing and validation
          npm install -g http-server

      - name: Validate HTML Structure
        run: |
          echo "Validating HTML structure..."
          # Check if index.html is valid HTML
          if [ -f "index.html" ]; then
            echo "✓ index.html exists"
            # Basic HTML validation - check for required tags
            if grep -q "<!DOCTYPE html>" index.html && grep -q "<html" index.html && grep -q "</html>" index.html; then
              echo "✓ HTML structure appears valid"
            else
              echo "✗ HTML structure validation failed"
              exit 1
            fi
          else
            echo "✗ index.html not found"
            exit 1
          fi

      - name: Validate JavaScript Syntax
        run: |
          echo "Validating JavaScript syntax..."
          # Check JavaScript files for basic syntax errors
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./.git/*" | while read file; do
            echo "Checking: $file"
            # Use node to check syntax
            node -c "$file" && echo "✓ $file syntax OK" || echo "✗ $file has syntax errors"
          done

      - name: Check File Structure
        run: |
          echo "Checking required files..."
          required_files=("index.html" "manifest.json" "sw.js" "README.md")
          for file in "${required_files[@]}"; do
            if [ -f "$file" ]; then
              echo "✓ $file exists"
            else
              echo "✗ $file missing"
              exit 1
            fi
          done

      - name: Validate PWA Manifest
        run: |
          echo "Validating PWA manifest..."
          if [ -f "manifest.json" ]; then
            # Basic JSON validation
            python3 -m json.tool manifest.json > /dev/null && echo "✓ manifest.json is valid JSON" || exit 1
          fi

      - name: Check Asset Files
        run: |
          echo "Checking asset structure..."
          required_dirs=("assets" "utils" "components" "favicon_io")
          for dir in "${required_dirs[@]}"; do
            if [ -d "$dir" ]; then
              echo "✓ $dir directory exists"
            else
              echo "✗ $dir directory missing"
              exit 1
            fi
          done

      - name: Test Application Startup
        run: |
          echo "Testing application startup..."
          # Start HTTP server in background
          http-server . -p 8080 -c-1 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 3

          # Test if server is responding
          if curl -f http://localhost:8080/ > /dev/null 2>&1; then
            echo "✓ Application server started successfully"
          else
            echo "✗ Application server failed to start"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi

          # Test key endpoints
          endpoints=("/" "/manifest.json" "/sw.js")
          for endpoint in "${endpoints[@]}"; do
            if curl -f "http://localhost:8080$endpoint" > /dev/null 2>&1; then
              echo "✓ $endpoint is accessible"
            else
              echo "✗ $endpoint is not accessible"
              kill $SERVER_PID 2>/dev/null || true
              exit 1
            fi
          done

          # Clean up
          kill $SERVER_PID 2>/dev/null || true

      - name: Generate Build Report
        run: |
          echo "Generating build report..."
          echo "## Build Information" > build-report.md
          echo "- Build Date: $(date)" >> build-report.md
          echo "- Commit: ${{ github.sha }}" >> build-report.md
          echo "- Branch: ${{ github.ref_name }}" >> build-report.md
          echo "- Repository: ${{ github.repository }}" >> build-report.md
          echo "" >> build-report.md
          echo "## File Structure" >> build-report.md
          find . -type f -not -path "./.git/*" -not -path "./node_modules/*" | sort >> build-report.md

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md
          retention-days: 30

  # Continuous Deployment Job (only on main/master branch)
  deploy:
    name: Deploy to GitHub Pages
    needs: ci
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare Deployment
        run: |
          echo "Preparing files for deployment..."

          # Create deployment directory
          mkdir -p _site

          # Copy all necessary files
          cp -r * _site/ 2>/dev/null || true

          # Remove unnecessary files from deployment
          rm -rf _site/.git
          rm -rf _site/.github
          rm -f _site/.gitignore
          rm -f _site/build-report.md

          # Ensure required files are present
          if [ ! -f "_site/index.html" ]; then
            echo "Error: index.html not found in deployment"
            exit 1
          fi

          echo "Deployment preparation completed"

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
